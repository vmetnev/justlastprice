export interface XMLNodeArgs {
    path?: string;
    attributesStr?: string;
}
interface GetSiblingsParams {
    dir: 'previous' | 'next';
    stopAtType?: new () => XMLNode;
    includeStopAtType?: boolean;
}
export declare class XMLNode {
    private parent;
    private previousSibling;
    private nextSibling;
    private children;
    private text;
    private attributesStr;
    private path;
    constructor(args?: XMLNodeArgs);
    getSiblings(params: GetSiblingsParams): XMLNode[];
    extractBold(str?: string): string;
    parseValue(str?: string | null): string | number | null;
    setPreviousSibling(node: XMLNode | null): void;
    setNextSibling(node: XMLNode | null): void;
    removeChild(node: XMLNode): void;
    setParent(node: XMLNode | null): void;
    getNextSibling(): XMLNode | null;
    getPreviousSibling(): XMLNode | null;
    getParent(): XMLNode | null;
    getAttributes(): Record<string, string>;
    getAttributesStr(): string;
    getChildren(): XMLNode[];
    addChild(node: XMLNode): void;
    getText(): string;
    setText(text: string): void;
    getPath(): string;
}
export {};
