import { DocumentNode } from './XMLNode/DocumentNode';
interface OnCharacterData {
    char: string;
    index: number;
    path: string;
    pathOccurrenceCount: number;
    attributesStr: string;
}
interface ParseTableNodesParams {
    xml: string;
}
interface Parse2Params {
    xml: string;
    onCharacter?: (data: OnCharacterData) => void;
    onOpenTag?: (data: OnCharacterData) => void;
    onCloseTag?: (data: OnCharacterData) => void;
}
interface IterateTablesParams {
    xml: string;
    parentPath?: string;
    trimSpaces?: boolean;
    onCharacter?: (data: OnCharacterData & {
        textMap: Map<string, string>;
    }) => void;
    onOpenTag?: (data: OnCharacterData & {
        textMap: Map<string, string>;
    }) => void;
    onCloseTag?: (data: OnCharacterData & {
        textMap: Map<string, string>;
    }) => void;
}
export default class XMLParser {
    iterateXML(params: Parse2Params): string[];
    /**
     * Returns text in each table cell mapped by `${table}.${row}.${col}`
     */
    getTableTextMap(params: IterateTablesParams): Map<string, string>;
    getDocumentNode(params: ParseTableNodesParams): DocumentNode;
}
export {};
