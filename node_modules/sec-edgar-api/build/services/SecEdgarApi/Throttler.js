"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Throttler = /** @class */ (function () {
    function Throttler(args) {
        if (args === void 0) { args = {}; }
        var _a = args.maxConcurrent, maxConcurrent = _a === void 0 ? 10 : _a, _b = args.delayMs, delayMs = _b === void 0 ? 1100 : _b, onProgress = args.onProgress, onResult = args.onResult, onError = args.onError, onEnd = args.onEnd;
        this.maxConcurrent = maxConcurrent;
        this.delayMs = delayMs;
        this.decrementTimeouts = new Set();
        this.queue = [];
        this.results = [];
        this.errors = [];
        this.onProgress = onProgress;
        this.onResult = onResult;
        this.onError = onError;
        this.onEnd = onEnd;
    }
    Throttler.prototype.setDelayMs = function (delayMs) {
        this.delayMs = delayMs;
    };
    Throttler.prototype.add = function (fn) {
        this.queue.push(fn);
        this.run();
    };
    Throttler.prototype.run = function () {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var countRunning, fn, decrementTimeout, result, err_1;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        countRunning = this.decrementTimeouts.size;
                        if (countRunning >= this.maxConcurrent) {
                            return [2 /*return*/];
                        }
                        if (this.queue.length === 0) {
                            if (countRunning === 0) {
                                (_a = this.onEnd) === null || _a === void 0 ? void 0 : _a.call(this, this.results, this.errors);
                            }
                            return [2 /*return*/];
                        }
                        fn = this.queue.shift();
                        decrementTimeout = setTimeout(function () {
                            _this.decrementTimeouts.delete(decrementTimeout);
                            _this.run();
                        }, this.delayMs);
                        this.decrementTimeouts.add(decrementTimeout);
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fn()];
                    case 2:
                        result = _e.sent();
                        this.results.push(result);
                        (_b = this.onResult) === null || _b === void 0 ? void 0 : _b.call(this, result);
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _e.sent();
                        this.errors.push(err_1);
                        (_c = this.onError) === null || _c === void 0 ? void 0 : _c.call(this, err_1);
                        return [3 /*break*/, 4];
                    case 4:
                        (_d = this.onProgress) === null || _d === void 0 ? void 0 : _d.call(this, {
                            queueLength: this.queue.length,
                            countRunning: this.decrementTimeouts.size,
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    return Throttler;
}());
exports.default = Throttler;
