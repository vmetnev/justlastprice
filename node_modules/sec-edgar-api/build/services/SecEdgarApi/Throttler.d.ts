interface OnProgressData {
    queueLength: number;
    countRunning: number;
}
interface ThrottlerArgs {
    maxConcurrent?: number;
    delayMs?: number;
    onProgress?: (data: OnProgressData) => void;
    onResult?: (result: any) => void;
    onError?: (err: any) => void;
    onEnd?: (results: any[], errors: any[]) => void;
}
export interface IThrottler {
    setDelayMs(delayMs: number): void;
    add: (fn: () => Promise<any>) => void;
}
export default class Throttler implements IThrottler {
    private readonly decrementTimeouts;
    private readonly queue;
    private readonly results;
    private readonly errors;
    private maxConcurrent;
    private delayMs;
    onProgress?: (data: OnProgressData) => void;
    onResult?: (result: any) => void;
    onError?: (err: any) => void;
    onEnd?: (results: any[], errors: any[]) => void;
    constructor(args?: ThrottlerArgs);
    setDelayMs(delayMs: number): void;
    add(fn: () => Promise<any>): void;
    private run;
}
export {};
