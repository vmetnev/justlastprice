import { FilingListItemTranslated } from '../../types/submission.type';
export interface SubmissionRequestWrapperOptions {
    maxRequests?: number;
}
export interface SendRequestParams {
    url: string;
}
interface SubmissionRequestWrapperArgs<T> {
    submissions: FilingListItemTranslated[];
    options?: SubmissionRequestWrapperOptions;
    sendRequest: (params: SendRequestParams) => Promise<T>;
}
interface SubmissionRequestWrapperResult<T> {
    result: T | null;
    error: string | null;
    submission: FilingListItemTranslated;
}
export default class SubmissionRequestWrapper<T> {
    private results;
    private readonly options;
    private readonly submissions;
    private readonly errors;
    private readonly sendRequest;
    private requestCount;
    private isDone;
    constructor(args: SubmissionRequestWrapperArgs<T>);
    setOptions(options: SubmissionRequestWrapperOptions): void;
    requestNext(): Promise<SubmissionRequestWrapperResult<T>>;
    skip(count?: number): void;
    requestAll(): Promise<SubmissionRequestWrapperResult<T>[]>;
    clearResults(): void;
    getResults(): SubmissionRequestWrapperResult<T>[];
    getErrors(): string[];
    getSize(): number;
    getSubmissions(): FilingListItemTranslated[];
}
export {};
