import { CompanyFactListData } from '../../types/company-facts.type';
import { ReportRaw, ReportType } from '../../types/report-raw.type';
import FactIterator, { IterateFactsCallbackData } from './FactIterator';
interface ReportRawParserArgs {
    factIterator?: FactIterator;
}
export interface ParseReportsOptions {
    /**
     * Instantaneous data may be filed later than the original filing date.
     * It is flagged by "I" at the end of the frame property. defaults to true. see https://www.sec.gov/edgar/sec-api-documentation
     * */
    mergeInstantaneousData?: boolean;
    reportsToInclude?: ReportType | ReportType[] | null;
}
/**
 * @see https://www.sec.gov/edgar/sec-api-documentation
 */
export default class ReportRawParser {
    private readonly factIterator;
    constructor(args?: ReportRawParserArgs);
    /**
     * Avoids deep nesting logic while iteratating through company facts
     *
     * @param callback called on each company fact.
     */
    iterateCompanyFacts(companyFactListData: Pick<CompanyFactListData, 'facts'>, callback: (data: IterateFactsCallbackData) => void): void;
    /**
     * Returns raw reports in ascending order by report date. if date is the same, priority is filed date, frame, form
     */
    parseReports(companyFactListData: Pick<CompanyFactListData, 'facts'>, options?: ParseReportsOptions): ReportRaw[];
    private getReportType;
    private getFiscalYear;
}
export {};
