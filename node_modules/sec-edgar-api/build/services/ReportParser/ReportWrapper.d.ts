import { FiscalPeriod, ReportRaw, ReportTranslated } from '../../types';
import ReportTranslatedProxy from './ReportTranslatedProxy';
/**
 * Contains translated report and raw report with methods to access other reports
 */
export default class ReportWrapper extends ReportTranslatedProxy implements ReportTranslated {
    private readonly report;
    private readonly reportMap;
    private readonly reportRaw;
    constructor(report: ReportTranslated, reportRaw?: ReportRaw, reportMap?: Map<string, ReportWrapper>);
    /**
     * when using JSON.stringify on this class instance, it will stringify the report
     */
    toJSON(): ReportTranslated;
    getReportRaw(): ReportRaw;
    getReport(): ReportTranslated;
    /**
     * Gets report wrapper for prev or future report
     *
     * @param offset positive number returns future report, negative returns past
     */
    getReportOffset(offset: number, reportType: 'QUARTERLY' | 'ANNUAL'): ReportWrapper | null;
    /**
     * Gets report wrappers in the same fiscal year as this report
     */
    getReportsFiscalYearByPeriod(fiscalYear?: number): Record<FiscalPeriod, ReportWrapper | null>;
}
