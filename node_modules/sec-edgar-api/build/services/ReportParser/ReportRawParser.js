"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var FactIterator_1 = require("./FactIterator");
/**
 * @see https://www.sec.gov/edgar/sec-api-documentation
 */
var ReportRawParser = /** @class */ (function () {
    function ReportRawParser(args) {
        var _a = (args !== null && args !== void 0 ? args : {}).factIterator, factIterator = _a === void 0 ? new FactIterator_1.default() : _a;
        this.factIterator = factIterator;
    }
    /**
     * Avoids deep nesting logic while iteratating through company facts
     *
     * @param callback called on each company fact.
     */
    ReportRawParser.prototype.iterateCompanyFacts = function (companyFactListData, callback) {
        this.factIterator.iterateCompanyFacts(companyFactListData, callback);
    };
    /**
     * Returns raw reports in ascending order by report date. if date is the same, priority is filed date, frame, form
     */
    ReportRawParser.prototype.parseReports = function (companyFactListData, options) {
        var _this = this;
        var _a = options !== null && options !== void 0 ? options : {}, reportsToInclude = _a.reportsToInclude, mergeInstantaneousData = _a.mergeInstantaneousData;
        // default to all report types
        var reportsToIncludeSet = reportsToInclude
            ? new Set(Array.isArray(reportsToInclude) ? reportsToInclude : [reportsToInclude])
            : null;
        // for getting the earliest filed date for each report
        var datesFiledByDateForm = new Map();
        // for mapping individual properties to the report
        var reportsByKey = new Map();
        // fiscal period only provided for filed date, used to map to later assign for quarter end date
        var monthsFiledByFiscalPeriod = new Map();
        // iterate individual properties AKA "facts"
        this.iterateCompanyFacts(companyFactListData, function (_a) {
            var _b, _c, _d, _e, _f, _g, _h;
            var factValue = _a.factValue, propertyName = _a.propertyName, taxonomy = _a.taxonomy;
            var filed = factValue.filed, val = factValue.val, form = factValue.form, fp = factValue.fp, dateReport = factValue.end;
            // get frame for keys and to merge instantaneous data
            var isInstantaneousData = (_c = (_b = factValue.frame) === null || _b === void 0 ? void 0 : _b.endsWith('I')) !== null && _c !== void 0 ? _c : false;
            var isMergableFrame = (mergeInstantaneousData !== null && mergeInstantaneousData !== void 0 ? mergeInstantaneousData : true) && isInstantaneousData;
            var frame = isMergableFrame ? (_d = factValue.frame) === null || _d === void 0 ? void 0 : _d.substring(0, factValue.frame.length - 1) : factValue.frame;
            // keys to map report and file dates
            var keyDateForm = "".concat(dateReport, "_").concat(form);
            var keyReport = "".concat(frame, "_").concat(keyDateForm);
            // set earliest date filed
            var dateFiledPrev = (_e = datesFiledByDateForm.get(keyDateForm)) !== null && _e !== void 0 ? _e : filed;
            var dateFiled = filed < dateFiledPrev ? filed : dateFiledPrev;
            datesFiledByDateForm.set(keyDateForm, dateFiled);
            // if frame is undefined, the value is no longer the most recent
            if (!frame)
                return;
            var isTTM = frame.substring(6, 8).length !== 2;
            var reportType = _this.getReportType({ form: form, taxonomy: taxonomy, isTTM: isTTM });
            var isReportToInclude = (_f = reportsToIncludeSet === null || reportsToIncludeSet === void 0 ? void 0 : reportsToIncludeSet.has(reportType)) !== null && _f !== void 0 ? _f : true;
            if (!isReportToInclude)
                return;
            // set the month filed, will be used to get the fiscal period and year
            if (reportType === 'QUARTERLY' || reportType === 'ANNUAL') {
                var monthFiled = Number(filed.substring(5, 7));
                monthsFiledByFiscalPeriod.set(fp, ((_g = monthsFiledByFiscalPeriod.get(fp)) !== null && _g !== void 0 ? _g : new Set()).add(monthFiled));
            }
            var report = (_h = reportsByKey.get(keyReport)) !== null && _h !== void 0 ? _h : {
                dateReport: dateReport,
                dateFiled: dateFiled,
                form: form,
                isTTM: isTTM,
                frame: frame,
                taxonomy: taxonomy,
                reportType: reportType,
                // these will be updated
                fiscalPeriod: 'FY',
                fiscalYear: 0,
            };
            reportsByKey.set(keyReport, report);
            // update earliest date filed
            report.dateFiled = dateFiled;
            report[propertyName] = val;
        });
        // end date is typically the month before the filed date, so subtract 1, set to 12 if 0
        var fiscalPeriodsByMonth = new Map();
        monthsFiledByFiscalPeriod.forEach(function (monthsSet, fiscalPeriod) {
            monthsSet.forEach(function (month) { return fiscalPeriodsByMonth.set(month - 1 || 12, fiscalPeriod); });
        });
        // set fiscal period and year, then merge by year_quarter, because some reports have end dates a couple days apart
        var reportsByYearPeriod = new Map();
        reportsByKey.forEach(function (report) {
            var _a;
            var dateReport = report.dateReport, reportType = report.reportType;
            var monthReport = Number(dateReport.substring(5, 7));
            var fiscalPeriod = (_a = fiscalPeriodsByMonth.get(monthReport)) !== null && _a !== void 0 ? _a : 'FY';
            // Q4 is always FY, so needs to be changed to Q4 (comes from fp property in fact)
            report.fiscalPeriod = reportType === 'QUARTERLY' && fiscalPeriod === 'FY' ? 'Q4' : fiscalPeriod;
            report.fiscalYear = _this.getFiscalYear({ dateReport: dateReport, reportType: reportType, fiscalPeriod: report.fiscalPeriod });
            var keyReport = "".concat(report.fiscalYear, "_").concat(report.fiscalPeriod);
            var reportPrev = reportsByYearPeriod.get(keyReport);
            // if a report was already assigned to this key, merge and use the latest dateReport
            if (reportPrev) {
                var dateReport_1 = report.dateReport > reportPrev.dateReport ? report.dateReport : reportPrev.dateReport;
                reportPrev.dateReport = dateReport_1;
                reportsByYearPeriod.set(keyReport, __assign(__assign({}, reportPrev), report));
            }
            else {
                reportsByYearPeriod.set(keyReport, report);
            }
        });
        // return in ascending order by date report, date filed, frame, form
        return Array.from(reportsByYearPeriod.values()).sort(function (a, b) {
            var keyA = "".concat(a.fiscalYear, "_").concat(a.isTTM ? 'Q5' : a.fiscalPeriod, "_").concat(a.dateReport, "_").concat(a.dateFiled);
            var keyB = "".concat(b.fiscalYear, "_").concat(b.isTTM ? 'Q5' : b.fiscalPeriod, "_").concat(b.dateReport, "_").concat(b.dateFiled);
            return keyA > keyB ? 1 : -1;
        });
    };
    ReportRawParser.prototype.getReportType = function (data) {
        var form = data.form, taxonomy = data.taxonomy, isTTM = data.isTTM;
        if (form === '8-K')
            return '8K';
        else if (taxonomy === 'dei')
            return 'DOCUMENT_ENTITY_INFO';
        else if (isTTM)
            return 'ANNUAL';
        return 'QUARTERLY';
    };
    ReportRawParser.prototype.getFiscalYear = function (data) {
        var dateReport = data.dateReport, reportType = data.reportType, fiscalPeriod = data.fiscalPeriod;
        var date = new Date("".concat(dateReport, "T00:00:00"));
        var day = date.getDate();
        var month = day < 14 ? date.getMonth() || 12 : date.getMonth() + 1;
        var year = date.getFullYear();
        var monthAddMap = {
            Q1: 9,
            Q2: 6,
            Q3: 3,
            Q4: 0,
            FY: 0,
        };
        return month + monthAddMap[fiscalPeriod] > 12 && reportType === 'QUARTERLY' ? year + 1 : year;
    };
    return ReportRawParser;
}());
exports.default = ReportRawParser;
