import { ReportTranslated } from '../../../types';
interface SplitValueBetweenReportsParams {
    key: keyof ReportTranslated;
    value: number;
    reports: ReportTranslated[];
    roundToPlaces: number;
}
export type ExcludeNulls<T> = {
    [K in keyof T]: Exclude<T[K], null>;
};
export declare function getSingleNullKey<T>(obj: T): keyof T | null;
export declare function round(num: number, places: number): number;
/**
 * returns the number of places the number is rounded to
 */
export declare function getRoundToPlaces(num: number): 1 | 1000000 | 1000;
/**
 * distributes a value between each report evenly, and rounds to the nearest roundToPlaces. gives remainder to last report
 */
export declare function splitValueBetweenReports(params: SplitValueBetweenReportsParams): void;
export {};
