"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var key_translations_1 = require("../../util/key-translations");
var PropertyResolver_1 = require("./PropertyResolver");
var ReportRawParser_1 = require("./ReportRawParser");
var ReportWrapper_1 = require("./ReportWrapper");
/**
 * Takes company facts data from the SEC and translates them to reports as json objects.
 */
var ReportParser = /** @class */ (function () {
    function ReportParser(args) {
        var _a = args !== null && args !== void 0 ? args : {}, _b = _a.reportRawParser, reportRawParser = _b === void 0 ? new ReportRawParser_1.default() : _b, _c = _a.propertyResolver, propertyResolver = _c === void 0 ? new PropertyResolver_1.default() : _c, _d = _a.keyTranslator, keyTranslator = _d === void 0 ? key_translations_1.default : _d;
        this.reportRawParser = reportRawParser;
        this.keyTranslator = keyTranslator;
        this.propertyResolver = propertyResolver;
    }
    /**
     * translates company facts to ReportTranslated. To translate to custom report, use parseReportsRaw and translateReportsRaw
     *
     * This includes only 10-K and 10-Q annual and quarterly reports. To include all reports, use parseReportsRaw
     *
     * @param companyFactListData This is the json file contents of CIK[number].json file from the SEC website. You can find these using their API or by downloading the companyfacts.zip file: https://www.sec.gov/edgar/sec-api-documentation
     */
    ReportParser.prototype.parseReports = function (companyFactListData, usePropertyResolver) {
        if (usePropertyResolver === void 0) { usePropertyResolver = true; }
        var reportsRaw = this.reportRawParser.parseReports(companyFactListData, {
            reportsToInclude: ['ANNUAL', 'QUARTERLY'],
        });
        return this.parseReportsFromRaw(reportsRaw, usePropertyResolver);
    };
    /**
     * Same as parseReports but accepts ReportRaw[] instead of CompanyFactListData
     */
    ReportParser.prototype.parseReportsFromRaw = function (reportsRaw, usePropertyResolver) {
        if (usePropertyResolver === void 0) { usePropertyResolver = true; }
        var reportByYearQuarter = new Map();
        var reportsRawFiltered = reportsRaw.filter(function (reportRaw) {
            return reportRaw.reportType === 'ANNUAL' || reportRaw.reportType === 'QUARTERLY';
        });
        this.translateReportsRaw(reportsRawFiltered, function (report, reportRaw) {
            var fiscalPeriod = report.fiscalPeriod, fiscalYear = report.fiscalYear;
            var keyReport = "".concat(fiscalYear, "_").concat(fiscalPeriod);
            reportByYearQuarter.set(keyReport, new ReportWrapper_1.default(report, reportRaw, reportByYearQuarter));
            return report;
        });
        var reportWrappers = Array.from(reportByYearQuarter.values());
        if (usePropertyResolver) {
            this.propertyResolver.resolveAll(reportWrappers);
        }
        return reportWrappers;
    };
    /**
     * Note that this includes all reports by default, not just annual and quarterly. use options.reportsToInclude to filter
     *
     * @see https://www.sec.gov/edgar/sec-api-documentation
     */
    ReportParser.prototype.parseReportsRaw = function (companyFactListData, options) {
        return this.reportRawParser.parseReports(companyFactListData, options);
    };
    /**
     * parseReportsRaw but removes meta data from the report
     */
    ReportParser.prototype.parseReportsRawNoMeta = function (companyFactListData, options) {
        var reportsRaw = this.parseReportsRaw(companyFactListData, options);
        reportsRaw.forEach(function (reportRaw) {
            var report = reportRaw;
            delete report.dateFiled;
            delete report.dateReport;
            delete report.fiscalPeriod;
            delete report.fiscalYear;
            delete report.form;
            delete report.frame;
            delete report.isTTM;
            delete report.reportType;
            delete report.taxonomy;
        });
        return reportsRaw;
    };
    /**
     * Avoids deep nesting logic while iteratating through company facts
     *
     * @param callback called on each company fact.
     */
    ReportParser.prototype.iterateCompanyFacts = function (companyFactListData, callback) {
        this.reportRawParser.iterateCompanyFacts(companyFactListData, callback);
    };
    /**
     * Translate ReportRaw to ReportTranslated by default, but can be used to translate to any object using both the callback and keyTranslator
     *
     * @param reportsRaw this is the output of parseReportsRaw
     * @param callback this is called for each report and can be used to modify the report. This gets the report built by keyTranslator if provided, otherwise ReportTranslated
     * @param keyTranslator this is iterated through to build the report using the keys. If the ReportRaw has a key that matches a key in the keyTranslator, the value is used. if not, the value is null
     */
    ReportParser.prototype.translateReportsRaw = function (reportsRaw, callback, keyTranslator) {
        var keyTranslations = (keyTranslator !== null && keyTranslator !== void 0 ? keyTranslator : this.keyTranslator);
        var reports = [];
        reportsRaw.forEach(function (reportRaw) {
            var reportNew = {};
            // iterate translation keys, ensuring same order and priority
            for (var key in keyTranslations) {
                var keysRaw = keyTranslations[key];
                reportNew[key] = null;
                for (var _i = 0, keysRaw_1 = keysRaw; _i < keysRaw_1.length; _i++) {
                    var keyRaw = keysRaw_1[_i];
                    if (reportRaw[keyRaw] === undefined)
                        continue;
                    reportNew[key] = reportRaw[keyRaw];
                    break;
                }
            }
            var reportFiltered = callback
                ? callback(reportNew, reportRaw, keyTranslations)
                : reportNew;
            reports.push(reportFiltered);
        });
        return reports;
    };
    return ReportParser;
}());
exports.default = ReportParser;
